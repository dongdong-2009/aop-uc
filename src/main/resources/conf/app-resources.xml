<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd"
	default-autowire="byName" default-lazy-init="false">

	<!-- component-scan @Component , @Controller , @Service , @Repository -->
	<context:component-scan base-package="com.hotent.*.dao" />
	<context:component-scan base-package="com.hotent.platform.dao.system" />
	<context:component-scan base-package="com.hotent.*.service" />
	<context:component-scan base-package="com.casic.*.dao" />
	<context:component-scan base-package="com.casic.dao" />
	<context:component-scan base-package="com.casic.*.service" />
	<context:component-scan base-package="com.casic.service" />
	<context:component-scan base-package="com.casic.*.saas" /> 
	<context:component-scan base-package="com.casic.service.*" /> 
	<context:component-scan base-package="com.casic.dao.*" />

	<!-- 国际化资源 -->
	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource"
		scope="prototype">
		<property name="basenames">
			<list>
				<value>classpath:resource/errors</value>
				<value>classpath:resource/form</value>
				<value>classpath:resource/message</value>
			</list>
		</property>
		<property name="useCodeAsDefaultMessage" value="true" />
		<property name="cacheSeconds" value="0"></property>
		<property name="defaultEncoding" value="UTF-8"></property>
	</bean>
	
	<!-- 基于Cookie的本地化解析器 -->	
	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
		<property name="cookieMaxAge" value="604800"/>
		<property name="defaultLocale" value="en"/>
		<property name="cookieName" value="Language"></property>
	</bean>
	<!-- 基于Session的本地化解析器 
	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver">
   		<property name="defaultLocale" value="en"></property>
 	</bean>-->
 
	<!--加载配置文件 -->
	<bean id="configproperties"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="location" value="classpath:/conf/app.properties" />
	</bean>
	<bean id="systemproperties"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="location" value="classpath:/conf/system.properties" />
	</bean>
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="properties" ref="configproperties" />
	</bean>

	<!--jdbcTemplate -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!--专门用来产生ID -->
	<bean id="jdbcTemplateSN" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSourceSN" />
	</bean>

	<bean id="sqlSessionFactory" class="com.hotent.core.mybatis.SqlSessionFactoryFactoryBean">
		<property name="configLocation" value="classpath:/conf/configuration.xml" />
		<property name="mapperLocations">
			<list>
				<value>classpath:/com/hotent/*/maper/*.map.xml</value>
				<value>classpath:/com/casic/platform/maper/*.map.xml</value>
				<value>classpath:/com/casic/maper/*.map.xml</value>
				
			</list>
		</property>
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="dataSourceSN" class="org.logicalcobwebs.proxool.ProxoolDataSource">
		<property name="driver" value="${jdbc.driverClassName}" />
		<property name="driverUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="alias" value="${db.aliasSN}" />
		<property name="simultaneousBuildThrottle" value="${db.simultaneousBuildThrottleSN}" />
		<property name="maximumActiveTime" value="${db.maximumActiveTimeSN}" />
		<property name="houseKeepingTestSql" value="${db.houseKeepingTestSqlSN}" />
		<property name="maximumConnectionCount" value="${db.maximumConnectionCountSN}" />
		<property name="minimumConnectionCount" value="${db.minimumConnectionCountSN}" />
		<property name="delegateProperties" value="characterEncoding=${db.characterEncodingSN}" />
	</bean>

	<!-- <bean id="dataSource" class="org.logicalcobwebs.proxool.ProxoolDataSource">
		<property name="driver" value="${jdbc.driverClassName}" />
		<property name="driverUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="alias" value="${db.alias}" />
		<property name="simultaneousBuildThrottle" value="${db.simultaneousBuildThrottle}" />
		<property name="maximumActiveTime" value="${db.maximumActiveTime}" />
		<property name="houseKeepingTestSql" value="${db.houseKeepingTestSql}" />
		<property name="maximumConnectionCount" value="${db.maximumConnectionCount}" />
		<property name="minimumConnectionCount" value="${db.minimumConnectionCount}" />
		<property name="delegateProperties" value="characterEncoding=${db.characterEncoding}" />
	</bean> -->
	
	
	<!-- 官网例子 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
	
	<property name="driverClassName" value="${jdbc.driverClassName}" />
	<property name="url" value="${jdbc.url}" />
	<property name="username" value="${jdbc.username}" />
	<property name="password" value="${jdbc.password}" />
		 <!-- 配置监控统计拦截的filters -->
      <property name="filters" value="${druid.filters}" /> 
	
      <!-- 配置初始化大小、最小、最大 -->
      <property name="initialSize" value="1" />
      <property name="minIdle" value="1" /> 
      <property name="maxActive" value="20" />

      <!-- 配置获取连接等待超时的时间 -->
      <property name="maxWait" value="60000" />

      <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
      <property name="timeBetweenEvictionRunsMillis" value="60000" />

      <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
      <property name="minEvictableIdleTimeMillis" value="300000" />

      <property name="validationQuery" value="SELECT 'x'" />
      <property name="testWhileIdle" value="true" />
      <property name="testOnBorrow" value="false" />
      <property name="testOnReturn" value="false" />

      <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
      <property name="poolPreparedStatements" value="true" />
      <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
      
  </bean>



	<bean id="log4jdbcInterceptor" class="net.sf.log4jdbc.DataSourceSpyInterceptor" />
	
	<bean id="dataSourceLog4jdbcAutoProxyCreator"
		class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="interceptorNames">
			<list>
				<value>log4jdbcInterceptor</value>
			</list>
		</property>
		<property name="beanNames">
			<list>
				<value>dataSource</value>
			</list>
		</property>
	</bean>

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="logAspect" class="com.hotent.core.aop.LogAspect" />

	<bean id="httpClientUtil" class="com.casic.util.HttpFactory" />
	
	
	<aop:aspectj-autoproxy proxy-target-class="true" />  
	<bean id="logAdvice" class="com.casic.log.LoggerAdvice"></bean>

	<aop:config proxy-target-class="true">
	    <aop:advisor advice-ref="txAdvice"
			pointcut="execution(* com.hotent.platform.service..*.*(..))" />
		<aop:advisor advice-ref="txAdvice"
			pointcut="execution(* com.casic.platform.saas..*.*(..))" />
		<aop:advisor advice-ref="txAdvice"
			pointcut="execution(* com.casic.*.service..*.*(..))" />
		<aop:advisor advice-ref="txAdvice"
			pointcut="execution(* com.casic.service..*.*(..))" />
		<!-- 日志的配置,手写日志，自带日志不符合安全保密要求 <aop:aspect ref="logAspect"> <aop:pointcut 
			expression="execution(* com..*Controller..*(..))" id="logPointcut"/> <aop:around 
			pointcut-ref="logPointcut" method="doAudit"/> </aop:aspect> -->
	</aop:config>
	
	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true" />
			<tx:method name="is*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="add*"  propagation="REQUIRED"/>
			<tx:method name="register*"  propagation="REQUIRED"/>
			<tx:method name="set*"  propagation="REQUIRED"/>
			<tx:method name="update*"  propagation="REQUIRED"/>
			<tx:method name="delete*"  propagation="REQUIRED"/>
			<tx:method name="*" isolation="DEFAULT" />
		</tx:attributes>
	</tx:advice>

	<!-- 文件模版引擎配置 -->
	<bean id="freemarkerConfiguration"
		class="org.springframework.ui.freemarker.FreeMarkerConfigurationFactoryBean">
		<property name="templateLoaderPath" value="classpath:template/" />
		<property name="defaultEncoding" value="UTF-8" />
	</bean>

	<!-- 字符串模版引擎配置。 <bean id="freemarkerConfigurationString" class="org.springframework.ui.freemarker.FreeMarkerConfigurationFactoryBean"> 
		<property name="preTemplateLoaders" > <list> <ref bean="templateLoader"/> 
		</list> </property> <property name="defaultEncoding" value="UTF-8"/> </bean> -->
	<bean id="templateLoader" class="freemarker.cache.StringTemplateLoader"></bean>
	<!-- freemaker引擎 -->
	<bean id="freemarkEngine" class="com.hotent.core.engine.FreemarkEngine">
		<property name="configuration" ref="freemarkerConfiguration" />
	</bean>

	<!--发送邮件配置 -->
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="${mail.host}" />
		<property name="username" value="${mail.username}" />
		<property name="password" value="${mail.password}" />
		<property name="defaultEncoding" value="${mail.defaultEncoding}" />
		<property name="javaMailProperties">
			<props>
				<prop key="mail.smtp.auth">true</prop>
			</props>
		</property>
	</bean>

	<!-- QUARTZ 2.0配置的问题 -->
	<bean id="scheduler"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean"
		lazy-init="false" destroy-method="destroy">
		<property name="autoStartup" value="false" />
		<property name="waitForJobsToCompleteOnShutdown" value="false" />
		<property name="dataSource" ref="dataSource" />
		<property name="overwriteExistingJobs" value="true" />
		<property name="startupDelay" value="60"></property>
		<property name="jobFactory">
			<bean class="org.quartz.simpl.SimpleJobFactory"></bean>
		</property>
		<property name="quartzProperties">
			<props>
				<!--Job Store <prop key="org.quartz.jobStore.driverDelegateClass">org.quartz.impl.jdbcjobstore.StdJDBCDelegate</prop> -->
				<prop key="org.quartz.jobStore.driverDelegateClass">${quartz.jdbcjobstore}</prop>
				<prop key="org.quartz.jobStore.class">org.quartz.impl.jdbcjobstore.JobStoreTX</prop>
				<prop key="org.quartz.jobStore.tablePrefix">QRTZ_</prop>

				<prop key="org.quartz.jobStore.clusterCheckinInterval">20000</prop>
				<prop key="org.quartz.scheduler.instanceId">AUTO</prop>
				<prop key="org.quartz.scheduler.classLoadHelper.class">org.quartz.simpl.CascadingClassLoadHelper</prop>
				<prop key="org.quartz.jobStore.lockHandler.class">org.quartz.impl.jdbcjobstore.UpdateLockRowSemaphore
				</prop>
				<prop key="org.quartz.jobStore.lockHandler.updateLockRowSQL">UPDATE QRTZ_LOCKS SET LOCK_NAME = LOCK_NAME WHERE
					LOCK_NAME = ?</prop>
			</props>
		</property>
	</bean>

	<!-- Druid Filter <bean id="statFilter" class="com.alibaba.druid.filter.stat.StatFilter"></bean> -->
	<!-- <bean id="mergeStatFilter" class="com.alibaba.druid.filter.stat.MergeStatFilter"></bean> -->
	<!-- <bean id="merge-stat-filter" class="com.alibaba.druid.filter.encoding.EncodingConvertFilter"></bean> -->
	<!-- <bean id="encodingConvertFilter" class="com.alibaba.druid.filter.logging.Log4jFilter"></bean> -->
	<!-- <bean id="log4jFilter" class="com.alibaba.druid.filter.logging.Slf4jLogFilter"></bean> -->
	<!-- <bean id="commonsLogFilter" class="com.alibaba.druid.filter.logging.CommonsLogFilter"></bean> -->
	<!-- <bean id="wallFilter" class="com.alibaba.druid.wall.WallFilter"></bean> -->
	<!-- <bean id="druidFilterProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean"> -->
	<!-- <property name="location" value="classpath:/conf/druid-filters.properties" 
		/> -->
	<!-- </bean> -->


	<!-- activity directory 活动目录配置 -->
	<context:component-scan base-package="com.hotent.core.ldap.dao.impl" />
	<bean id="ldapSource" class="org.springframework.ldap.core.support.LdapContextSource">
		<property name="url" value="${ldapUrl}" />
		<property name="base" value="${ldapBase}" />
		<property name="userDn" value="${ldapUserDn}" />
		<property name="password" value="${ldapPassword}" />
		<property name="pooled" value="${ldapPooled}"></property>
	</bean>
	<bean id="ldapTemplate" class="org.springframework.ldap.core.LdapTemplate">
		<property name="ContextSource" ref="ldapSource"></property>
		<property name="ignorePartialResultException" value="true" />
	</bean>
	
	<!-- 配置druid监控spring jdbc -->
    <bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor" />
 
    <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
        <property name="patterns">
            <list>
                <!-- <value>com.casic.oa.report.service.*</value> -->
                <value>com.casic.*</value>
            </list>
        </property>
    </bean>
    <aop:config>
        <aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />
    </aop:config>
	

</beans>